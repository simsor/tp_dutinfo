Module listeChainee

Type maillon = {
	contenu : car
	suivant : Pointeur maillon
}

// Procédure permettant d'initialiser une liste chaînée
// Paramètre de sortie : une liste 
// Post-condition : la liste est initialisée
Procédure initListe(; p : Pointeur maillon)
Début
	p <- NULL
Fin initListe


// Procédure permettant de désinitialiser une liste chaînée
// Paramètre d'entrée : la liste à désinitialiser
// Paramètre de sortie : la liste désinitialisée
// Pré-condition : la liste est initialisée
// Post-condition : la liste est désinitialisée
Procédure desinitListe(p : Pointeur maillon ; p : Pointeur maillon)
Début
	Si p ≠ NULL Alors
		desinitListe((Contenu p).suivant)
		Détruire p
	Fin Si
Fin desinitListe


// Procédure permettant d'ajouter un élément en queue de liste
// Paramètres d'entrée : une liste et un maillon
// Paramètres de sortie : la liste ayant le maillon en queue
// Pré-condition : la liste est initialisée et l'élément n'est pas nul
// Post-condition : la liste possède l'élément passé en paramètre en queue
Procédure ajoutEnQueue(p : Pointeur maillon, nouv : Pointeur maillon ; p : Pointeur maillon)
Début
	Avec tmp : Pointeur maillon
	tmp <- p
	
	Si tmp ≠ NULL Alors
		Tant Que (Contenu tmp).suivant ≠ NULL Faire
			tmp <- (Contenu tmp).suivant
		Fin Faire
		
		(Contenu tmp).suivant <- nouv
		(Contenu nouv).suivant <- NULL
	Sinon
		p <- nouv
		(Contenu p).suivant <- NULL
	Fin Si
Fin ajoutEnQueue

//Procédure permettant de concaténer deux listes
//Paramètre d'entrée : Deux listes chainées
//Paramètre de sortie : une liste chainée composée des deux précédentes
//Pré-condition : les listes sont initialisées
//Post-condition : la deuxième liste est ajoutée à la fin de la première
Procédure concatListe( l1 : Pointeur maillon, l2 : Pointeur maillon ; l : Pointeur maillon)
Début
	Avec tmp : Pointeur maillon
	tmp <- l1
	
	Si tmp ≠ NULL Alors
		Tant Que (Contenu tmp).suivant ≠ NULL Faire
			tmp <- (Contenu tmp).suivant
		Fin Faire
		
		(Contenu tmp).suivant <- l2
	Sinon
		l1 <- l2
	Fin Si
Fin concatListe

// Procédure permettant de supprimer l'élément en queue de liste
// Paramètre d'entrée : la liste
// Paramètre de sortie : la liste avec un élément en moins
// Pré-condition : la liste est initialisée
// Post-condition : la liste a perdu son dernier élément
Procédure supprQueue(p : Pointeur maillon ; p : Pointeur maillon)
Début
	Avec tmp : Pointeur maillon
		 avantdernier : Pointeur maillon
	tmp <- p
	avantdernier <- NULL
	
	Si tmp ≠ NULL Alors
		Tant Que (Contenu tmp).suivant ≠ NULL Faire
			avantdernier <- tmp
			tmp <- (Contenu tmp).suivant
		Fin Faire
		
		Détruire tmp
		Si avantdernier ≠ NULL Alors
			(Contenu avantdernier).suivant <- NULL
		Fin Si
	Fin Si
Fin supprQueue


// Fonction permettant de connaître la longueur de la liste
// Paramètre d'entrée : la liste
// Valeur retournée : la longueur de la liste
// Pré-condition : la liste est initialisée
Fonction longueurListe(p : Pointeur maillon) Retourne Entier
Début
	Avec n : Entier
		 tmp : Pointeur maillon
		 
	n <- 0
	tmp <- p
	Tant Que tmp ≠ NULL Faire
		tmp <- (Contenu tmp).suivant
		n <- n+1
	Fin Faire
	
	Retourne n
Fin longueurListe


// Fonction permettant d'observer la queue de la liste
// Paramètre d'entrée : la liste
// Valeur retournée : la queue de la liste
// Pré-condition : la liste est initialisée et possède au moins 1 élément
Fonction queueListe(p : Pointeur maillon) Retourne maillon
Début
	Retourne (Contenu p)
Fin queueListe


// Procédure permettant d'afficher la liste
// Paramètre d'entrée : une liste
// Pré-condition : la liste est initialisée
Procédure afficherListe(p : Pointeur maillon)
Début
	Avec tmp : Pointeur maillon
	tmp <- p
	Tant que tmp != NULL Faire
		Afficher (Contenu tmp).contenu
		tmp <- (Contenu tmp).suivant
	Fin Faire
Fin afficherListe 
